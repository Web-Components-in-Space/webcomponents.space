---
import BaseLayout from '../layouts/BaseLayout.astro'
---
<BaseLayout title="All Episodes of Web Components in Space" page="episodes">
    <ul class="episode-list">
        <li>
            <strong>Episode 3:</strong> <a href="../s01e03">Pose Capture with Tensorflow...in Space!</a>
            <p>
                In this episode we dive into pose capture and pose visualization on a video or webcam using Tensorflow.js.
                Luckily we are joined by developer advocate Jason Mayes from the Tensorflow team to get us up to speed.
            </p>
            <p>
                Unfortunately, some of the TFJS libraries can't be pulled in as normal ES modules, and
                this causes our "Web Compon-o-tron" to break down. So, we're forced to make the pose capture components ourselves.
            </p>
            <p>
                This is fine, though, because there are some good problems that come up when building a complicated component like this one.
                We find that in order to do video playback we need to tweak our web-dev-server configuration a bit, we learn about subclassing events,
                and explore slots as a way to add non-essential or optional UI. Also, without really any UI in our main components, we avoid helper
                libraries like Lit and go completely vanilla with our Web Components.
            </p>
            <p>
                Lastly, we attempt to use Rollup, not as a final build step, but to bundle the Tensorflow packages that crashed the "Web Compon-o-tron" and use them as trouble-free ES modules in
                our development environment.

                <ul>
                <li><a href="https://www.npmjs.com/package/pose-capture" target="_blank">Pose Capture on NPM</a></li>
                <li><a href="https://github.com/Web-Components-in-Space/S01E03-PoseTracking" target="_blank">Demo App</a></li>
                </ul>
            </p>
        </li>
        <li>
            <strong>Episode 2:</strong> <a href="../s01e02">Real-world issues and Doodles...in Space!</a>
            <p>
                In Episode 2 we are joined by Merl, the author of Shader Doodle. Shader Doodle is a fantastic Web Component
                that lets you author WebGL based computer graphics without all the headache of setting up your canvas,
                and managing lots of obscure WebGL program code. You simply focus on a fragment, and maybe a vertex shader
                for the more complex scenes.
            </p>
            <p>
                Again, we'll be creating another entire application from scratch with Lit, Web Dev Server, and Adobe's
                Spectrum Web Components. This time however, we'll be flexing Web Dev Server's muscles a bit. The application
                in episode one may have a been a bit too perfect. Our episode two application will explore some more
                complicated setup as well be using Typescript, using (or pretending to use) real CSS files - no more CSS in JS.
                We'll also have some unexpected hiccups with some libraries we use some extra Web Dev Server features to
                step in and save the day.
            </p>
            <p>
                Also, can AI have hurt feelings? Our "Web Compon-o-tron" might be a tad upset because Merl's Shader Doodle
                is already a Web Component, and we won't be requesting it's services this episode.
            </p>
        </li>
        <li>
                <strong>Episode 0:</strong> <a href="../s01e00">Introducing Web Components...in Space!</a>
                <p>
                    Web Components have been around in some form or another for a decade. But only in the past two years
                    have they really taken off and became a formidable tool in your front-end tech stack. Ben talks a bit
                    about their history, how they became fun to work with, and issues a dire warning and wild speculation
                    concerning their explosive growth.
                </p>
                <p>
                    This all leads to why Ben is up in space. And it makes perfect sense. No, really, it does.
                </p>
        </li>
    </ul>
</BaseLayout>
